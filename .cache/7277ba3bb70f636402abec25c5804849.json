{"dependencies":[],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar GameBoard = function GameBoard() {\n  var board = this;\n\n  // The current list of objects\n  this.objects = [];\n  this.cnt = {};\n\n  // Add a new object to the object list\n  this.add = function (obj) {\n    obj.board = this;\n    this.objects.push(obj);\n    this.cnt[obj.type] = (this.cnt[obj.type] || 0) + 1;\n    return obj;\n  };\n\n  // Mark an object for removal\n  this.remove = function (obj) {\n    var idx = this.removed.indexOf(obj);\n    if (idx == -1) {\n      this.removed.push(obj);\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  // Reset the list of removed objects\n  this.resetRemoved = function () {\n    this.removed = [];\n  };\n\n  // Removed an objects marked for removal from the list\n  this.finalizeRemoved = function () {\n    for (var i = 0, len = this.removed.length; i < len; i++) {\n      var idx = this.objects.indexOf(this.removed[i]);\n      if (idx != -1) {\n        this.cnt[this.removed[i].type]--;\n        this.objects.splice(idx, 1);\n      }\n    }\n  };\n\n  // Call the same method on all current objects\n  this.iterate = function (funcName) {\n    var args = Array.prototype.slice.call(arguments, 1);\n    for (var i = 0, len = this.objects.length; i < len; i++) {\n      var obj = this.objects[i];\n      obj[funcName].apply(obj, args);\n    }\n  };\n\n  // Find the first object for which func is true\n  this.detect = function (func) {\n    for (var i = 0, val = null, len = this.objects.length; i < len; i++) {\n      if (func.call(this.objects[i])) return this.objects[i];\n    }\n    return false;\n  };\n\n  // Call step on all objects and them delete\n  // any object that have been marked for removal\n  this.step = function (dt) {\n    this.resetRemoved();\n    this.iterate('step', dt);\n    this.finalizeRemoved();\n  };\n\n  // Draw all the objects\n  this.draw = function (ctx) {\n    this.iterate('draw', ctx);\n  };\n\n  // Check for a collision between the\n  // bounding rects of two objects\n  this.overlap = function (o1, o2) {\n    return !(o1.y + o1.h - 1 < o2.y || o1.y > o2.y + o2.h - 1 || o1.x + o1.w - 1 < o2.x || o1.x > o2.x + o2.w - 1);\n  };\n\n  // Find the first object that collides with obj\n  // match against an optional type\n  this.collide = function (obj, type) {\n    return this.detect(function () {\n      if (obj != this) {\n        var col = (!type || this.type & type) && board.overlap(obj, this);\n        return col ? this : false;\n      }\n    });\n  };\n};\n\nexports.default = GameBoard;"},"hash":"3029d94418c47cb2efb19eeff59a7cd6"}